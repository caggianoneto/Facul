import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
 
public class ExemploFilaPrioridade {
 
    public static void main(String[] args) {
         
        //exemplo ordenação natural de fila de prioridade
        Queue<Integer> integerPriorityQueue = new PriorityQueue<Integer>(7);
        Random rand = new Random();
        for(int i=0;i<7;i++){
            integerPriorityQueue.add(new Integer(rand.nextInt(100)));
        }
        for(int i=0;i<7;i++){
            Integer in = integerPriorityQueue.poll();
            System.out.println("Processando Inteiro:"+in);
        }
         
        //Exemplo PriorityQueue com Comparador
        Queue<Cliente> clientePriorityQueue = new PriorityQueue<Cliente>(7, idComparator);
        addDataToQueue(clientePriorityQueue);
         
        pollDataFromQueue(clientePriorityQueue);
         
    }
     
    //Comparador implementação classe anônima
    public static Comparator<Cliente> idComparator = new Comparator<Cliente>(){
         
        @Override
        public int compare(Cliente c1, Cliente c2) {
            return (int) (c1.getId() - c2.getId());
        }
    };
 
    //método de utilização para adicionar dados aleatórios para a Fila
    private static void addDataToQueue(Queue<Cliente> customerPriorityQueue) {
        Random rand = new Random();
        for(int i=0; i<7; i++){
            int id = rand.nextInt(100);
            customerPriorityQueue.add(new Customer(id, "HHHHHHH "+id));
        }
    }
     
    //método de utilitário para pesquisar dados a partir de fila
    private static void pollDataFromQueue(Queue<Cliente> customerPriorityQueue) {
        while(true){
            Cliente cust = customerPriorityQueue.poll();
            if(cust == null) break;
            System.out.println("Processando cliente com ID="+cust.getId());
        }
    }
 
}
